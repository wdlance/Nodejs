<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>人脸标注</title>
    <base href="/">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <style type="text/css">
     .wrapper {
        width: 1100px;
        height: 600px;
        margin: auto;
    }
     .wrapper .left, .wrapper .right{
     float:left;
     }
    .wrapper ul {
        padding: 0px;
        margin: 0px;
        margin-bottom: 15px;
        border-bottom: 1px solid #dcdcdc;
    }
    
    .wrapper ul li {
        list-style: none;
        float: left;
        height: 40px;
        line-height: 40px;
        border: 1px solid #dcdcdc;
        border-bottom: none;
        padding: 0px 15px;
    }
    
    .wrapper ul li.active {
        border: 1px solid red;
        color: red;
    }
    
    .step {
        text-align: center;
    }
    
    .wrapper .operate {
        margin-bottom: 30px;
    }
    
    .wrapper .img_area {
        width: 800px;
        border: 1px solid #dcdcdc;
        height: 500px;
        float: left;
        overflow: hidden;
        position: relative;
    }
    
    .wrapper .img_area img {
        position: absolute;
        left: 0px;
        top: 0px;
    }
    
    .wrapper .img_area .rect,
    .wrapper .img_area .close,
    .wrapper .img_area .border {
        position: absolute;
        z-index: 100;
    }
    
    .wrapper .img_area .border {
        border: 3px solid rgba(255, 0, 0, 0.5);
        z-index: 50;
    }
    
    .wrapper .img_area .choosed {
        border: 3px solid red;
    }
    
    .wrapper .img_area .masking {
        background: rgba( 89, 89, 89, 0.3);
    }
    
    .wrapper .img_area .close {
        width: 20px;
        height: 20px;
        background: rgba(0, 0, 0, 0.2);
        color: #fff;
        text-align: center;
        line-height: 20px;
    }
    
    .wrapper .img_area .point {
        position: absolute;
        background: red;
        width: 10px;
        height: 10px;
        border-radius: 100%;
        z-index: 150;
    }
    
    .wrapper .choose_area {
        border: 1px solid #dcdcdc;
        padding: 15px;
        margin-top:102px;
        height:478px;
    }
    
    .wrapper .choose_area .item {
        text-align: center;
        height:25%;
    }
    
    .wrapper .choose_area .item:last-child {
        border-right: none;
    }
      .wrapper .choose_area .item .title{
     margin-bottom:15px;
     }
     .undoList{
        width: 300px;
    height: 400px;
    position: fixed;
    top: 50%;
    left: 50%;
    background: #fff;
    margin-top: -200px;
    margin-left: -150px;
    border: 1px solid #dcdcdc;
    box-shadow: 0px 0px 5px #ccc;
    border-radius: 10px;
    padding:15px;
    display:none;
    z-index: 200;
    }
    .undoList .title,.undoList .footer{
    text-align: center;
    height: 40px;
    line-height: 40px;
    border-bottom: 1px solid #dcdcdc;
    }
    .undoList .footer{
    border:none;
    border-top:1px solid #dcdcdc;
    }
    .undoList .footer button{
    width: 100%;
    height: 100%;
    display: block;
    cursor: pointer;
    background: none;
    border: none;
    }
    .undoList .content{
    overflow-y:auto;
    height:300px;
    padding:15px 0px;
    }
    .undoList .content .tip{
        text-align: center;
    margin-top: 15px;
    }
    .undoList .content .item{
    line-height:30px;
      }
    </style>
</head>

<body>
    <div class="wrapper">
    <ul>
    <li class="face active">人脸检测</li>
      <li class="body">人行检测</li>
      <div style="clear:both;"></div>
    </ul>
    <div class="left">
            <div class="operate">
            <button class="load">加载图片</button>
            <button class="mask">蒙版</button>
            <button class="insulate">隔离</button>
            <button class="save">保存</button>
            <button class="del_rect">删除人脸框</button>
            <button class="compare">比对</button>
        </div>
        <h3 class="step">
步骤一：选择图片
</h3>
  <div style="font-size: 12px;">通过方向键可移动图片位置，滚动鼠标可放大/缩小图片</div>
        <div class="img_area">

            <img class="img" src="" onload="loadImage(this)">
        </div>
    </div>
    <div class="right">
           <fieldset class="choose_area">
            <legend>选择人脸标签</legend>
            <div class="item">
                <div class="title">人脸角度(人眼可见的特征点数量)</div>
                <input type="radio" name="angle" value="2" checked="checked" />2
                <input type="radio" name="angle" value="3" />3
                <input type="radio" name="angle" value="4" />4
                <input type="radio" name="angle" value="5" />5
            </div>
            <div class="item">
                <div class="title">遮挡情况</div>
                <input type="radio" name="shadow" value="0" checked="checked" />没有
                <input type="radio" name="shadow" value="1" />半遮挡
                <input type="radio" name="shadow" value="2" />全遮挡
            </div>
            <div class="item">
                <div class="title">人脸清晰度</div>
                <input type="radio" name="definition" value="0" checked="checked" />清晰
                <input type="radio" name="definition" value="1" />模糊
            </div>
        </fieldset>
    </div>
       <div class="undoList">
        <div class="title">对比结果</div>
        <div class="content"></div>
        <div class="footer"><buttton onclick="closeUndoList()">好的</button></div>
        </div>
        <script src="/lib/jquery-1.11.3.min.js"></script>
        <script src="/lib/jquery.mousewheel.min.js"></script>
</body>
<script type="text/javascript">
$('.wrapper li').on('click',function(){
    $('.wrapper li').removeClass('active');
    $(this).addClass('active');
    if($('.face').hasClass('active')){
    location.href='http://localhost:3000'
    }else{
     location.href='http://localhost:3000/body'
    }
})
//获取全部图片
var images = []; //存储后台返回的所有图片
function getAllImage(){
    clear();
    $.ajax({
        url: 'http://localhost:3000?act=getAll',
        method: 'post',
        data: {},
        async:false,
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {
              for(var i=0;i<jsonObj.data.length;i++){
            var img='http://localhost:3000/images/'+jsonObj.data[i];
             images.push(img) 
            }
            } else {
                alert(jsonObj.msg)
            }
        }
    })
}
getAllImage();
var img_num = 0; //计算当前显示图片的次序
$('.load').on('click', function() {
   img_num = 0;
   clear();
   var first = images[0];
   var src = first;
   $('.img_area img').attr('src', src);
   get_face_info();
   img_num++;
})
//获取被隔离的所有文件
var insulates=[];
function getInsulate(){
    insulates=[];//清除上一次存储的信息
    $.ajax({
        url: 'http://localhost:3000?act=getInsulate',
        method: 'post',
        data: {},
        async:false,
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {
                 if(jsonObj.data){
                  insulates=jsonObj.data.split('\n')
                }
               
            } else if(jsonObj.ret<0){
                alert(jsonObj.msg)
            }
        }
    })
}
//获取所有被处理过的图片
var persons=[]
function getPersons(){
    persons=[];//清除上一次存储的信息
    $.ajax({
        url: 'http://localhost:3000?act=getPersons',
        method: 'post',
        data: {},
        async:false,
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {
                if(jsonObj.data){
                var data=JSON.parse(jsonObj.data);
                for(var i=0;i<data.length;i++){
                persons.push(data[i].src);
                }
                }
                
            } else if(jsonObj.ret<0){
                alert(jsonObj.msg)
            }
        }
    })
}
document.onkeydown = function(event) {
    if (event.keyCode == 37) {
        var left = $('.img_area').find('img').position().left;
        left = left - 50;
        $('.img_area').find('img').css('left', left + 'px');
        move_rect_point('left')

    } else if (event.keyCode == 39) {
        var left = $('.img_area').find('img').position().left;
        left = 50 + left;
        $('.img_area').find('img').css('left', left + 'px');
        move_rect_point('right')
    } else if (event.keyCode == 38) {
        var top = $('.img_area').find('img').position().top;
        top = top - 50;
        $('.img_area').find('img').css('top', top + 'px')
        move_rect_point('up')
    } else if (event.keyCode == 40) {
        var top = $('.img_area').find('img').position().top;
        top = top + 50;
        $('.img_area').find('img').css('top', top + 'px')
         move_rect_point('down')
    }
}
//随着图片的上下左右移动，标注的人脸框和关键点也要移动
function move_rect_point(direction) {
    if ($('.img_area').find('.border').length > 0) {
        for (var i = 0; i < $('.img_area').find('.border').length; i++) {
            var b_left = $('.img_area').find('.border').eq(i).position().left;
            var b_top = $('.img_area').find('.border').eq(i).position().top;
            switch (direction) {
                case 'left':
                    b_left = b_left - 50;

                    $('.img_area').find('.border').eq(i).css('left', b_left + 'px');
                    break;
                case 'right':
                    b_left = b_left + 50;

                    $('.img_area').find('.border').eq(i).css('left', b_left + 'px');
                    break;
                case 'up':
                    b_top = b_top - 50;

                    $('.img_area').find('.border').eq(i).css('top', b_top + 'px');
                    break;
                case 'down':
                    b_top = b_top + 50;
                    $('.img_area').find('.border').eq(i).css('top', b_top + 'px');
                    break;
            }

        }
    }
    if ($('.img_area').find('.point').length > 0) {
        for (var i = 0; i < $('.img_area').find('.point').length; i++) {
            var p_left = $('.img_area').find('.point').eq(i).position().left;
            var p_top = $('.img_area').find('.point').eq(i).position().top;
            switch (direction) {
                case 'left':
                    p_left = p_left - 50;
                    $('.img_area').find('.point').eq(i).css('left', p_left + 'px');
                    break;
                case 'right':
                    p_left = p_left + 50;

                    $('.img_area').find('.point').eq(i).css('left', p_left + 'px');
                    break;
                case 'up':
                    p_top = p_top - 50;

                    $('.img_area').find('.point').eq(i).css('top', p_top + 'px');
                    break;
                case 'down':
                    p_top = p_top + 50;
                    $('.img_area').find('.point').eq(i).css('top', p_top + 'px');
                    break;
            }

        }

    }
}
//获取存储的人脸信息
function get_face_info() {
    var src = $('.img_area img').attr('src');
    $.ajax({
        url: 'http://localhost:3000?act=get_face_info',
        method: 'post',
        data: {
            src: src
        },
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {
                var faceInfo = JSON.parse(jsonObj.data).faceInfo;
                var maskInfo = JSON.parse(jsonObj.data).maskInfo;
                if(faceInfo.rects){
                     rects = JSON.parse(info.rects);
                }
                if(faceInfo.points){
                    points = JSON.parse(info.points);
                }
                drawRect(rects);
                drawPoint(points);
           
            } else if (jsonObj.ret != -1 && jsonObj.ret != 0) {
                alert(jsonObj.msg)
            }
        }
    })
}
//绘制人脸框
function drawRect(rectInfos) {
    for (var i = 0; i < rectInfos.length; i++) {
        var rectInfo = rectInfos[i];
        var rect = $('<div class="rect"></div>');
        var border = $('<div class="border"></div>');
        $('.img_area').append(border);
        var b_class = "border" + i;
        $('.img_area').find('.border').eq(i).addClass(b_class);
        $('.img_area').find('.border').eq(i).append(rect);
        var r_class = "rect" + i;
        $('.img_area').find('.rect').eq(i).addClass(r_class);
        $('.img_area').find('.rect').eq(i).css({
            width: rectInfo.width,
            height: rectInfo.height
        })
        $('.img_area').find('.border').eq(i).css({
            left: rectInfo.left,
            top: rectInfo.top,
            width: rectInfo.width,
            height: rectInfo.height
        })
        r_num++;
    }
}
//绘制关键点
function drawPoint(pointInfos) {
    for (var i = 0; i < pointInfos.length; i++) {
        var pointInfo = pointInfos[i];
        var point = $('<div class="point"></div>');
        $('.img_area').append(point);
        var className = "point" + i;
        $('.img_area').find('.point').eq(i).addClass(className)
        var point_x = pointInfo.left;
        var point_y = pointInfo.top;
        $('.img_area').find('.point').eq(i).css({
            left: point_x,
            top: point_y
        })
        p_num++;
    }
}
//设置人形标签选择项
function setChoose(rectInfo){
    var angle=rectInfo.angle;
    var shadow=rectInfo.shadow;
    var definition=rectInfo.definition;
    $("input[name='angle'][value='" + angle + "']").prop("checked", "checked");
    $("input[name='shadow'][value='" + shadow + "']").prop("checked", "checked");
    $("input[name='definition'][value='" + definition + "']").prop("checked", "checked");
}
function loadImage() {
    //保存图片原始大小
    storeInitialSize()
}
//获取图片大小
function getImageSize() {
    return {
        width: $('.img_area img').width(),
        height: $('.img_area img').height(),
    }
}
//存储图片初始大小
function storeInitialSize() {
    var width = getImageSize().width;
    var height = getImageSize().height;
    $('.img_area img').data('width', width);
    $('.img_area img').data('height', height);
}
//鼠标滚动放大缩小图片
var scroll_num = 0;
$('.img_area').hover(function(e) {}, function() {}).mousewheel(function(event, delta, deltaX, deltaY) {
    if ($('.img_area').find('img').attr('src') == "") {
        return;
    }
    var img = $('.img_area').find('img')
    scroll_num++;
    var height = img.height(); //获取图片宽度 
    var width = img.width(); // 获取图片高度 
    var stepex = height / width; //获取退片宽高比
    var minHeight = img.data('height'); //获取图片初始高度
    var tempStep = 50; // 每次滚动增减幅度
    //img.removeAttr('style');
    if (delta == 1) { //鼠标向上滚动
        img.width( width + scroll_num * tempStep / stepex)
        img.height(height + scroll_num * tempStep)
        change_location(width, img.width(), height, img.height())
    } else if (delta == -1) { //鼠标向下滚动
        if (height > minHeight) {
            img.width(  width - scroll_num * tempStep / stepex)
       img.height(height - scroll_num * tempStep)
            change_location(width, img.width(), height, img.height())
        } else {
             img.width(minHeight/stepex)
       img.height(minHeight)
        }

    }
    event.preventDefault();
    scroll_num = 0;
});
var hasDrag = false; //表示人脸框发生了click时间还是拖动事件
var hasMove=false;
var r_num = 0; //记录人脸框个数
var rects = [];
var x0 = 0,
    y0 = 0,
    w = 0,
    h = 0;
$('.img_area').on('mousedown', 'img,.border', function(e) {
    e.stopPropagation();
    if ($('.img_area').find('img').attr('src') == "") {
        return;
    }
    if ($(e.target).hasClass('border')) {
        hasDrag = true;
        hasMove = false;
    }
    e.preventDefault(); //禁止浏览器默认的图片拖动效果
    var width0 = $(this).data('width'); //获取图片原始宽度
    var height0 = $(this).data('height'); //获取图片原始高度
    var width = $(this).width(); //获取图片当前宽度
    var height = $(this).height(); //获取图片当前高度
    //获取鼠标点击位置
    var x = e.clientX;
    var y = e.clientY;
    //获取图片相对位置
    var left = $('.img_area img').offset().left;
    var top = $('.img_area img').offset().top;
    //计算得到点击点相对图片位置
    x0 = x - left;
    y0 = y - top;
})
$('.img_area').on('mouseup', 'img,.border', function(e) {
    e.stopPropagation()
    if ($('.img_area').find('img').attr('src') == "") {
        return;
    }
    //获得滚动条滚动长度、宽度
    var scrollX = getScrollLength().scrollX
    var scrollY = getScrollLength().scrollY;
  
        if (hasDrag == false) {
            //获取鼠标点击位置
            var x = e.clientX;
            var y = e.clientY;
            //获取图片相对位置
            var left = $('.img_area img').offset().left;
            var top = $('.img_area img').offset().top;
            //计算得到点击点相对图片位置
            var x1 = x - left;
            var y1 = y - top;
            //计算拖动宽度、高度
            w = x1 - x0;
            h = y1 - y0;
            var rect = $('<div class="rect"></div>');
            var border = $('<div class="border"></div>');
            $('.img_area').append(border);
            var b_class = "border" + r_num;
            $('.img_area').find('.border').eq(r_num).addClass(b_class);
            $('.img_area').find('.border').eq(r_num).append(rect);
            var r_class = "rect" + r_num;
            $('.img_area').find('.rect').eq(r_num).addClass(r_class);
            $('.img_area').find('.rect').eq(r_num).css({
                width: w,
                height: h
            })
            $('.img_area').find('.border').eq(r_num).css({
                left: x0 + scrollX+$(this).position().left,
                top: y0 + scrollY+$(this).position().top,
                width: w,
                height: h
            })
            isChooseRect = false;
            var px = getRatio().px;
            var py = getRatio().py;
            rects.push({
                left: x0+ scrollX,
                top: y0+ scrollY,
                width: w,
                height: h,
                px: px,
                py: py,
                rect: $('.img_area').find('.rect').eq(r_num).attr('class')
            })
            r_num++;
            //切换步骤
            $('.step').html("步骤三：标注关键点")
        } else {
            if(hasMove){
                    var border=$('.img_area').find('.border');
            for(var i=0;i<border.length;i++){
            if($(border[i]).css('cursor')=='nwse-resize'){
            //获取鼠标释放位置
            var x1 = e.clientX;
            var y1 = e.clientY;
            //获取图片相对位置
            var left = $('.img_area img').offset().left;
            var top = $('.img_area img').offset().top;
            //计算得到点击点相对图片位置
            var x2 = x1 - left;
            var y2 = y1 - top;
            //计算拖动宽度、高度
            w = x2 - x0;
            h = y2 - y0;
            var choose_rect = $(border[i]);
            if (choose_rect.length > 0) {
                choose_rect.css({
                    left: choose_rect.position().left,
                    top: choose_rect.position().top,
                    width: w + choose_rect.innerWidth(),
                    height: h + choose_rect.innerHeight()
                })
                choose_rect.find('.rect').css({
                    width: choose_rect.innerWidth(),
                    height: choose_rect.innerHeight()
                })
                var r_class = choose_rect.find('.rect').attr('class');
                for (var i = 0; i < rects.length; i++) {
                    if (rects[i].rect == r_class) {
                        rects[i].left = choose_rect.position().left;
                        rects[i].top = choose_rect.position().top;
                        rects[i].width = choose_rect.innerWidth(),
                        rects[i].height = choose_rect.innerHeight()
                    }
                }
            }
        }
    }
    hasMove=false;
            }
        
        }
       
        hasDrag = false;
})
$('.img_area').on('mousemove', '.border', function(e){
    hasMove=true;
})
$('.img_area').on('mouseup', '.rect', function(e){
  e.stopPropagation()
})
//标注关键点
var p_num = 0; //用于记录关键点数
var points = []
$('.img_area').on('click', '.rect', function(e) {
            e.stopPropagation()
                    //获得滚动条滚动长度、宽度
            var scrollX = getScrollLength().scrollX
            var scrollY = getScrollLength().scrollY;
            //获取鼠标点击位置
            var x = e.clientX;
            var y = e.clientY;
            //获取图片相对位置
            var left = $('.img_area').find('img').offset().left;
            var top = $('.img_area').find('img').offset().top;

            var p_x=x+scrollX;
            var p_y=y+scrollY;
            var r_x=$(this).parent().offset().left;
            var r_w = $(this).parent().width()
            var r_y = $(this).parent().offset().top;
            var r_h = $(this).parent().height();
            if (judge_point(r_x, r_w, p_x, r_y, r_h, p_y,p_num)) {
                var point = $('<div class="point"></div>');
                $('.img_area').append(point);
                var className = "point" + p_num;
                $('.img_area').find('.point').eq(p_num).addClass(className)
                $('.img_area').find('.point').eq(p_num).css({
                    left: p_x-5-left+'px',
                    top: p_y-5-top+'px'
                })
                var px = getRatio().px;
                var py = getRatio().py;
                points.push({
                    left:  p_x-5-left ,
                    top: p_y-5-top,
                    px: px,
                    py: py,
                    point: $('.img_area').find('.point').eq(p_num).attr('class')
                })
                if (points.length == 5) {
                    $('.step').html("步骤四:选择人脸特征标签");
                    $('.choose_area').css('display', 'block')
                }
                p_num++;
            } else {
                alert("请重新标注关键点")
            }
})
//点击边框选中人脸框
$('.img_area').on('click', '.border', function(e) {
    e.stopPropagation();
    $(this).siblings().removeClass('choosed');
    $(this).toggleClass('choosed');
     if($(this).hasClass("choosed")){
        var r_class = $(this).attr('class');
        var choose_rect_info = find_choose_rect_info(r_class);
        if (choose_rect_info) {
            setChoose(choose_rect_info);
        }
        }else{
        $("input[name='angle']").attr("checked", false);
        $("input[name='shadow']").attr("checked", false);
        $("input[name='definition']").attr("checked", false);
        }
})
//鼠标移入人脸框查看人脸标签
$('.img_area').on('mouseover', '.border', function(e) {
    //通过改变鼠标形态提示用户可以改变人脸框大小
    $(this).siblings().css('cursor','default')
    $(this).css('cursor','nwse-resize')
})
//鼠标移入人脸框查看人脸标签
$('.img_area').on('mouseover', '.rect', function(e) {
    e.stopPropagation()
    $(this).css('cursor','default')
})
//删除人脸框
$('.del_rect').on('click', function() {
        var choose_rect = $('.img_area').find('.choosed')
        if (choose_rect.length > 0) {
            var newRects = [];
            var newPoints = [];
            var r_class = $(choose_rect[0]).find('.rect').attr("class");
            del_from_points(r_class, '')
            del_from_rects(r_class)
            choose_rect.remove(); //删除人脸框
            isChooseRect = false;
            hasDrag = false;
            r_num--;
        } else {
            alert("未选中人脸框")
        }
})
//删除关键点
$('.img_area').on('click', '.point', function(e) {
        e.stopPropagation()
        var p_class = $(this).attr('class').split(" ")[1];
        var l0 = $('.img_area').find('.point0').length;
        var l1 = $('.img_area').find('.point1').length;
        var l2 = $('.img_area').find('.point2').length;
        var l3 = $('.img_area').find('.point3').length;
        var l4 = $('.img_area').find('.point4').length;
        switch (p_class) {
            case 'point0':
                if (l4 > 0 || l3 > 0 || l2 > 0 || l1 > 0) {
                    alert("请遵循关键点删除规则")
                } else {
                    p_num--;
                    del_from_points('', $(this))
                    $(this).remove();
                }
                break;
            case 'point1':
                if (l4 > 0 || l3 > 0 || l2 > 0) {
                    alert("请遵循关键点删除规则")
                } else {
                    p_num--;
                    del_from_points('', $(this))
                    $(this).remove();
                }
                break;
            case 'point2':
                if (l4 > 0 || l3 > 0) {
                    alert("请遵循关键点删除规则")
                } else {
                    p_num--;
                    del_from_points('', $(this))
                    $(this).remove();
                }
                break;
            case 'point3':
                if (l4 > 0) {
                    alert("请遵循关键点删除规则")
                } else {
                    p_num--;
                    del_from_points('', $(this))
                    $(this).remove();
                }
                break;
            case 'point4':
                p_num--;
                del_from_points('', $(this))
                $(this).remove();
                break;
            default:
                p_num--;
                del_from_points('', $(this))
                $(this).remove();
        }
})
//获取图片放大缩小比率
function getRatio() {
    var width0 = $('.img_area img').data('width');
    var height0 = $('.img_area img').data('height');
    var width1 = $('.img_area img').width();
    var height1 = $('.img_area img').height();
    var px = width1 / width0;
    var py = height1 / height0;
    return {
        px: px,
        py: py
    }
}
function getScrollLength() {
    return {
        scrollX: window.scrollX,
        scrollY: window.scrollY
    }
}
//随着图片放大缩小，标注位置也相应改变
function change_location(width0, width1, height0, height1) {
    var img=$('.img_area').find('img')
    var point = $('.img_area').find('.point')
    if (point.length > 0) {
        for (var i = 0; i < point.length; i++) {
            var point_left = point.eq(i).position().left-img.position().left;
            var point_top = point.eq(i).position().top-img.position().top;
            var w_value = point_left / width0;
            var h_value = point_top / height0;
            point.eq(i).css({
                left: width1 * w_value+img.position().left,
                top: height1 * h_value+img.position().top
            })
        }

    }
    var border = $('.img_area').find('.border');
    if (border.length > 0) {
        for (var i = 0; i < border.length; i++) {
            var border_left = border.eq(i).position().left-img.position().left;
            var border_top = border.eq(i).position().top-img.position().top;
            var width = border.eq(i).width();
            var height = border.eq(i).height();
            var w_value = width / width0;
            var h_value = height / height0;
            var l_value = border_left / width0;
            var t_value = border_top / height0;
            border.eq(i).css({
                left: width1 * l_value+img.position().left,
                top: height1 * t_value+img.position().top,
                width: width1 * w_value,
                height: height1 * h_value
            })
            border.eq(i).find('.rect').css({
                width: width1 * w_value,
                height: height1 * h_value
            })

        }
    }
}
//判断标注关键点位置是否合法
function judge_point(r_x, r_w, p_x, r_y, r_h, p_y) {
    if (p_x > r_x && p_x < r_x + r_w && p_y > r_y && p_y < r_y + r_h) {
    return true
          
    } else {
        return false
    }
}
//隔离图片
$('.insulate').on('click', function() {
        var src = $('.img_area img').attr('src');
        if (src) {
            $.ajax({
                url: 'http://localhost:3000?act=insulate',
                method: 'post',
                data: {
                    src: src
                },
                success: function(jsonObj) {
                    if (jsonObj.ret == 0) {
                        nextImg();
                    } else {
                        alert(jsonObj.msg)
                    }
                }
            })
        }
})
//给图片加蒙版
$('.mask').on('click', function() {
        var choose_rect = $('.img_area').find('.choosed')
        if (choose_rect.length > 0) {
            $(choose_rect[0]).find('.rect').addClass('masking')
        } else {
            alert("未选中人脸框！");
        }
})
//自动显示下一张图片
function nextImg() {
    if (img_num <=images.length) {
        clear()
        var img = images[img_num];
        var src = img;
        if(img_num==images.length){
        src=""
        }
        $('.img_area img').attr('src', src);
        get_face_info();
        //保存图片原始大小
        storeInitialSize()
        img_num++;
    } else {
        alert("已是最后一张图片")
    }
}
//确认人形标签选择
$('.confirm').on('click',function(){
    var angle=$("input[name='angle']:checked").val();
    var shadow=$("input[name='shadow']:checked").val();
    var definition=$("input[name='definition']:checked").val();
    var choose_rect=$('.img_area').find('.choosed');
    if(choose_rect.length>0){
    var r_class=choose_rect.find('.rect').attr('class');
    var choose_rect_info=find_choose_rect_info(r_class);
    choose_rect_info.label={
    angle:angle,
    shadow:shadow,
    definition:definition
    }
    $('.step').html('步骤二：标注人形框')
    }else{
    alert("请先选中人形框")
    }
})
$('input[type="radio"]').on('click',function(){
var choose_rect=$('.img_area').find('.choosed')
    if(choose_rect.length<1){
    alert("请先选中人脸框");
    }else{
    var val=$(this).val();
    var name=$(this).attr('name');
    var r_class=choose_rect.find('.rect').attr('class');
    var choose_rect_info=find_choose_rect_info(r_class);
    switch(name){
    case 'angle':
        choose_rect_info.angle=val;
    break;
     case 'shadow':
     choose_rect_info.shadow=val;
    break;
     case 'definition':
     choose_rect_info.definition=val;
    break;
    }
    }
})
//通过选中人形框的class值获取rects集合中的选中人形框的信息
function find_choose_rect_info(r_class){
    for(var i=0;i<rects.length;i++){
    var rect=rects[i]
    if(r_class==rect.rect){
    return rect;
    }
    }
}
//比对
$('.compare').on('click', function(e) {
     e.stopPropagation();
        getInsulate();
        getPersons();
        for(var i=0;i<insulates.length;i++){
        persons.push(insulates[i]);
        }
        var str="";
        for(var i=0;i<images.length;i++){
        var image=images[i];
        if($.inArray(image, persons)!=-1){//存在

        }else{
        str+='<div class="item">'+image+'</div>'
        }
        }
        if(images.length!=0){
         if(str==""){
        str="<div class='tip'>全部图片已经处理完毕</div>"
        }
       
        }else{
         str="<div class='tip'>请先加载图片</div>"
        }
        $('.undoList').find('.content').html(str)
        $('.undoList').css('display','block')
})
function closeUndoList(){
    $('.undoList').find('.content').html("")
    $('.undoList').css('display','none')
}
$('body').on('click',function(){
    $('.undoList').find('.content').html("")
    $('.undoList').css('display','none')
})
//点击未处理图片进行处理
$('.undoList').on('click','.item',function(){
   clear();
    var str=$(this).text();
    $('.img_area img').attr('src',str)
    img_num=getIndex(str)+1
    $('.undoList').find('.content').html("")
    $('.undoList').css('display','none')
})
//找出相应图片的次序
function getIndex(src){
    return n=$.inArray(src,images);
}
//保存操作信息并自动加载下一张图片
$('.save').on('click', function() {
    if($('.img_area img').attr('src')==''){
            return;
        }
        var mask = $('.img_area').find('.masking');
        if (mask.length > 0) {
            saveMask()
        }
        send_face_info();

})
//存储蒙版处理过的图片信息
function saveMask() {
    var src = $('.img_area').find('img').attr('src');
    $.ajax({
        url: 'http://localhost:3000?act=mask',
        method: 'post',
        data: {
            src: src
        },
        async: false,
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {

            } else {
                alert(jsonObj.msg)
            }
        }
    })
}

function send_face_info() {
    var rectInfos = renew_face_info().rects;
    var pointInfos = renew_face_info().points;
    var src = $('.img_area').find('img').attr('src');
    $.ajax({
        url: 'http://localhost:3000?act=store_face_info',
        method: 'post',
        data: {
            src: src,
            rects: JSON.stringify(rectInfos),
            points: JSON.stringify(pointInfos)
        },
        async: false,
        success: function(jsonObj) {
            if (jsonObj.ret == 0) {
                nextImg()
            } else {
                alert(jsonObj.msg)
            }
        }
    })
}
//恢复数据到图片原始大小
function renew_face_info() {
    var newRects = [],
        newPoints = [];
    //人脸框数据
    for (var i = 0; i < rects.length; i++) {
        if(!rects[i].px){
           rects[i].px=1;
        }
        if(!rects[i].py){
            rects[i].py=1;
        }
        var px = rects[i].px;
        var r_left = rects[i].left / px;
        var py = rects[i].py;
        var r_top = rects[i].top / py;
        //图片存储大小
        var w = rects[i].width / px;
        var h = rects[i].height / py;
  
        newRects.push({
            left: r_left,
            top: r_top,
            width: w,
            height: h,
            rect: rects[i].rect,
            angle: rects[i].angle,
            shadow:rects[i].shadow,
            definition:rects[i].definition
        })
    }
    //关键点数据
    for (var i = 0; i < points.length; i++) {
        if(!points[i].px){
   points[i].px=1;
    }
    if(!points[i].py){
    points[i].py=1;
    }
        var px = points[i].px;
        var py = points[i].py;
        var p_left = points[i].left / px;
        var p_top = points[i].top / py;
        newPoints.push({
            left: p_left,
            top: p_top,
            rect: points[i].rect,
            point: points[i].point
        })
    }
    return {
        rects: newRects,
        points: newPoints
    }
}

function get_face_label() {
    var angle = $('.angle').val();
    var shadow = $('.shadow').val();
    var definition = $('.definition').val();
    return {
        angle: angle,
        shadow: shadow,
        definition: definition
    }
}
//找到指定人脸框中的关键点
function findPoints(rect) {
    var newPoints = [];
    for (var i = 0; i < points.length; i++) {
        var p_class = obj.attr('class');
        var point = points[i].point;
        if (p_class != point.attr('class')) {
            newPoints.push(points[i])
        }
    }
    points = newPoints;
}
//删除存储的关键点信息
function del_from_points(r_class, point) {
    var newPoints = [];
        var r_left = 0;
        var r_top = 0;
        var r_width = 0;
        var r_height = 0;
    if (r_class != "") {
        for(var i=0;i<rects.length;i++){
            if(r_class==rects[i].rect){
                r_left = rects[i].left;
                r_top = rects[i].top;
                r_width = rects[i].width;
                r_height = rects[i].height;
                break;
            }
        }
        for (var i = 0; i < points.length; i++) {
            var p_left = points[i].left;
            var p_top =points[i].top;
            if (!judge_point(r_left, r_width, p_left, r_top, r_height, p_top)) {
                newPoints.push(points[i])
            } else {
                var p_class = points[i].point.split(" ")[1];
                $('.img_area').find('.' + p_class).remove();
                p_num--;
            }
        }
    }
    if (point != "") {
        for (var i = 0; i < points.length; i++) {
            var p_class = point.attr('class');
            if (p_class != points[i].point) {
                newPoints.push(points[i])
            }
        }
    }
    points = newPoints;
}
//删除存储的人脸框信息
function del_from_rects(r_class) {
    var newRects = [];
    for (var i = 0; i < rects.length; i++) {
        var rect = rects[i].rect;
        if (r_class != rect) {
            newRects.push(rects[i])
        }
    }
    rects = newRects;
}
//清除上一次图片信息
function clear() {
    $('.img_area').find('.point').remove();
    $('.img_area').find('.rect').remove();
    $('.img_area').find('.border').remove();
    $('.img_area').find('img').css({
        width: 'auto',
        height: 'auto',
    });
    $('.img_area').find('img').css('left','0px');
    $('.img_area').find('img').css('top','0px');
      //人形标签选择清空
    $("input[name='angle']").attr("checked",false);
    $("input[name='shadow']").attr("checked",false);
    $("input[name='definition']").attr("checked",false);

    r_num = 0;
    p_num = 0;
    hasDrag = false;
    hasMove = false;
    rects = [];
    points = [];
}
</script>

</html>
